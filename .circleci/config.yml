version: 2

# Docker environment.
defaults: &defaults
  working_directory: /go/src/istio.io/istio
  docker:
    - image: istio/ci:go1.10-k8s1.10.4-helm2.7.2-minikube0.25
  environment:
    GOPATH: /go
    SKIP_CLEANUP: true

# org context settings. If developing on a clone, please configure:

# DOCKER_USER
# DOCKER_PASS
# HUB: ex istio, costinm (it is not the hub, but the dockerhub org or user)

# VM environment. Includes docker.
integrationDefaults: &integrationDefaults
  machine: true
  working_directory: /go/src/istio.io/istio #same as docker
  environment:
    - CHANGE_MINIKUBE_NONE_USER: true
    - GOPATH: /go
    - SKIP_CLEANUP: true
    - KUBECONFIG: /go/out/minikube.conf
    - TEST_ENV: minikube-none

# Common procedure to initialize working directory
initWorkingDir: &initWorkingDir
  type: shell
  name: Initialize Working Directory
  pwd: /
  command: |
    sudo mkdir -p /go/src/istio.io/istio
    sudo chown -R circleci /go
    mkdir -p /go/out/tests
    mkdir -p /go/out/logs
    mkdir -p /home/circleci/logs

recordZeroExitCodeIfTestPassed: &recordZeroExitCodeIfTestPassed
  run:
    when: on_success
    name: Record zero exit code as test passed
    command: echo 0 > exit_code

recordNonzeroExitCodeIfTestFailed: &recordNonzeroExitCodeIfTestFailed
  run:
    when: on_fail
    name: Record nonzero exit code as test failed
    command: echo 1 > exit_code

markJobStartsOnGCS: &markJobStartsOnGCS
  run:
    when: always
    command: bin/ci2gubernator.sh --job_starts

markJobFinishesOnGCS: &markJobFinishesOnGCS
  run:
    when: always
    command: |
      make dumpsys || true
      make junit-report || true
      # TODO: upload the artifacts as well, for debugging !
      bin/ci2gubernator.sh --exit_code=$(cat exit_code) --junit_xml=/go/out/tests/junit.xml

jobs:
  codecov:
    <<: *defaults
    resource_class: xlarge
    environment:
      KUBECONFIG: /go/src/istio.io/istio/.circleci/config
      ISTIO_BIN: /go/bin
    steps:
      - checkout
      - run:
          name: Starting Kubernetes API Server standalone and running tests
          command: |
            make localTestEnv
            cd /go/src/istio.io/istio
            MAXPROCS=6 bin/codecov.sh
      - run:
          name: Uploading code coverage to codecov.io
          when: always
          command: bash <(curl -s https://codecov.io/bash) -f /go/out/codecov/coverage.cov
      - run:
          name: test
          command: |
            cd /go/out/codecov
            cat coverage.cov
      - store_artifacts:
          path: /go/out/codecov
